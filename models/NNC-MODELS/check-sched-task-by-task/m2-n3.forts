
    p1, p2, p3, c1, c2, c3 :continuous;
    T1 == 2, C1 == 1, D1 == 2,     T2 == 30, C2 == 1, D2 == 30,     T3 == 6, C3 == 5, D3 == 6: discrete; 

automaton sched

loc idle : while true wait {  c1'=0, c2'=0, c3'=0}
    when p1-T1>=0  do {p1'=0, c1'=C1} goto x1R;
    when p2-T2>=0  do {p2'=0, c2'=C2} goto x2R;
    when p3-T3>=0  do {p3'=0, c3'=C3} goto x3R;


loc x3R : while c3>=0 & p3-D3<=0 wait {  c1'=0, c2'=0, c3'=-1}
    when c3 == 0  do {} goto idle;
    when c3>0 & p3-D3==0 do {} goto error;
    when p1-T1>=0   do {p1'=0, c1'=C1} goto x1R3R;
    when p2-T2>=0   do {p2'=0, c2'=C2} goto x2R3R;

loc x2R : while c2>=0 & p2-D2<=0 wait {  c1'=0, c2'=-1, c3'=0}
    when c2 == 0  do {} goto idle;
    when c2>0 & p2-D2==0 do {} goto error;
    when p1-T1>=0   do {p1'=0, c1'=C1} goto x1R2R;
    when p3-T3>=0   do {p3'=0, c3'=C3} goto x2R3R;

loc x2R3R : while c2>=0 & p2-D2<=0 & c3>=0 & p3-D3<=0 wait {  c1'=0, c2'=-1, c3'=-1}
    when c2 == 0  do {} goto x3R;
    when c3 == 0  do {} goto x2R;
    when c2>0 & p2-D2==0 do {} goto error;
    when c3>0 & p3-D3==0 do {} goto error;
    when c3>0&p1-T1>=0   do {p1'=0, c1'=C1} goto x1R2R3W;

loc x1R : while c1>=0 & p1-D1<=0 wait { c1'=-1, c2'=0, c3'=0}
    when c1 == 0  do {} goto idle;
    when c1>0 & p1-D1==0 do {} goto error;
    when p2-T2>=0   do {p2'=0, c2'=C2} goto x1R2R;
    when p3-T3>=0   do {p3'=0, c3'=C3} goto x1R3R;

loc x1R3R : while c1>=0 & p1-D1<=0 & c3>=0 & p3-D3<=0 wait { c1'=-1, c2'=0, c3'=-1}
    when c1 == 0  do {} goto x3R;
    when c3 == 0  do {} goto x1R;
    when c1>0 & p1-D1==0 do {} goto error;
    when c3>0 & p3-D3==0 do {} goto error;
    when c3>0&p2-T2>=0   do {p2'=0, c2'=C2} goto x1R2R3W;

loc x1R2R : while c1>=0 & p1-D1<=0 & c2>=0 & p2-D2<=0 wait { c1'=-1, c2'=-1, c3'=0}
    when c1 == 0  do {} goto x2R;
    when c2 == 0  do {} goto x1R;
    when c1>0 & p1-D1==0 do {} goto error;
    when c2>0 & p2-D2==0 do {} goto error;
    when p3-T3>=0   do {p3'=0, c3'=C3} goto x1R2R3W;

loc x1R2R3W : while c1>=0 & p1-D1<=0 & c2>=0 & p2-D2<=0 & p3-D3<=0 wait { c1'=-1, c2'=-1,c3'=0}
    when c1 == 0  do {} goto x2R3R;
    when c2 == 0  do {} goto x1R3R;
    when c1>0 & p1-D1==0 do {} goto error;
    when c2>0 & p2-D2==0 do {} goto error;
    when p3-D3==0 do {} goto error;

loc error: while true wait {}

end

init := 
    loc[sched] == idle & 
    p1>=0 & c1==0 &
    p2>=0 & c2==0 &
    p3>=0 & c3==0;
bad := loc[sched]==error;
