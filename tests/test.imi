    p1, c1, d1, p2, c2, d2, p3, c3, d3,  x,y: continuous;
    O1 == 0, T1 == 8, C1 == 2, D1 == 8,     O2 == 0, T2 == 20, C2 == 2, D2 == 20,     O3 == 0, T3 == 50, C3 == 6, D3 == 50, 
    P == 5, Q == 5: discrete;

automaton act1
sync : r1;
loc wait_for_offset1 : while p1<=O1 wait {} 
    when p1==O1 sync r1 do { p1'= 0 } goto wait_for_period1;
loc wait_for_period1 : while p1<=T1 wait {}
    when p1==T1 sync r1 do { p1'= 0 } goto wait_for_period1;

end

automaton act2
sync : r2;
loc wait_for_offset2 : while p2<=O2 wait {}
    when p2==O2 sync r2 do { p2'= 0 } goto wait_for_period2;
loc wait_for_period2 : while p2<=T2 wait {}
    when p2==T2 sync r2 do { p2'= 0 } goto wait_for_period2;

end

automaton act3
sync : r3;
loc wait_for_offset3 : while p3<=O3 wait {}
    when p3==O3 sync r3 do { p3'= 0 } goto wait_for_period3;
loc wait_for_period3 : while p3<=T3 wait {}
    when p3==T3 sync r3 do { p3'= 0 } goto wait_for_period3;

end

automaton sched

sync : r1, r2, r3,  empty, go, frozen;

loc idle: while true wait {}
    when true  sync r1 do {c1'=0, d1'=0} goto f1R;
    when true  sync r2 do {c2'=0, d2'=0} goto f2R;
    when true  sync r3 do {c3'=0, d3'=0} goto f3R;


loc x3R : while c3<=C3 & d3<=D3 wait {}
    when c3 == C3 sync empty do {} goto idle;
    when c3<=C3-1 & d3==D3 do {} goto error;
    when c3<=C3-1 & d3<=D3-1 sync r1 do { c1'=0, d1'=0 } goto x1R3W;
    when c3<=C3-1 & d3<=D3-1 sync r2 do { c2'=0, d2'=0 } goto x2R3W;
    when c3<=C3-1 & d3<=D3-1 sync frozen do {} goto f3R;

loc f3R : while c3<=C3 & d3<=D3 wait {c3==0}
    when c3<=C3-1 & d3==D3 do {} goto error;
    when c3<=C3-1 & d3<=D3-1 sync r1 do { c1'=0, d1'=0 } goto f1R3W;
    when c3<=C3-1 & d3<=D3-1 sync r2 do { c2'=0, d2'=0 } goto f2R3W;
    when c3<=C3 & d3<=D3 sync go do {} goto x3R;

loc x2R : while c2<=C2 & d2<=D2 wait {}
    when c2 == C2 sync empty do {} goto idle;
    when c2<=C2-1 & d2==D2 do {} goto error;
    when c2<=C2-1 & d2<=D2-1 sync r1 do { c1'=0, d1'=0 } goto x1R2W;
    when c2<=C2-1 & d2<=D2-1 sync r3 do { c3'=0, d3'=0 } goto x2R3W;
    when c2<=C2-1 & d2<=D2-1 sync frozen do {} goto f2R;

loc f2R : while c2<=C2 & d2<=D2 wait {c2==0}
    when c2<=C2-1 & d2==D2 do {} goto error;
    when c2<=C2-1 & d2<=D2-1 sync r1 do { c1'=0, d1'=0 } goto f1R2W;
    when c2<=C2-1 & d2<=D2-1 sync r3 do { c3'=0, d3'=0 } goto f2R3W;
    when c2<=C2 & d2<=D2 sync go do {} goto x2R;

loc x2R3W : while c2<=C2 & d2<=D2 & c3<=C3 & d3<=D3 wait {c3==0}
    when c2 == C2  do {} goto x3R;
    when c2<=C2-1 & d2==D2 do {} goto error;
    when d3==D3 do {} goto error;
    when c2<=C2-1 & d2<=D2-1 & c3<=C3-1 & d3<=D3-1 sync r1 do { c1'=0, d1'=0 } goto x1R2W3W;
    when c2<=C2-1 & d2<=D2-1 & c3<=C3-1 & d3<=D3-1 sync frozen do {} goto f2R3W;

loc f2R3W : while c2<=C2 & d2<=D2 & c3<=C3 & d3<=D3 wait {c2==0& c3==0}
    when c2<=C2-1 & d2==D2 do {} goto error;
    when d3==D3 do {} goto error;
    when c2<=C2-1 & d2<=D2-1 & c3<=C3-1 & d3<=D3-1 sync r1 do { c1'=0, d1'=0 } goto f1R2W3W;
    when c2<=C2 & d2<=D2 & c3<=C3 & d3<=D3 sync go do {} goto x2R3W;

loc x1R : while c1<=C1 & d1<=D1 wait {}
    when c1 == C1 sync empty do {} goto idle;
    when c1<=C1-1 & d1==D1 do {} goto error;
    when c1<=C1-1 & d1<=D1-1 sync r2 do { c2'=0, d2'=0 } goto x1R2W;
    when c1<=C1-1 & d1<=D1-1 sync r3 do { c3'=0, d3'=0 } goto x1R3W;
    when c1<=C1-1 & d1<=D1-1 sync frozen do {} goto f1R;

loc f1R : while c1<=C1 & d1<=D1 wait {c1==0}
    when c1<=C1-1 & d1==D1 do {} goto error;
    when c1<=C1-1 & d1<=D1-1 sync r2 do { c2'=0, d2'=0 } goto f1R2W;
    when c1<=C1-1 & d1<=D1-1 sync r3 do { c3'=0, d3'=0 } goto f1R3W;
    when c1<=C1 & d1<=D1 sync go do {} goto x1R;

loc x1R3W : while c1<=C1 & d1<=D1 & c3<=C3 & d3<=D3 wait {c3==0}
    when c1 == C1  do {} goto x3R;
    when c1<=C1-1 & d1==D1 do {} goto error;
    when d3==D3 do {} goto error;
    when c1<=C1-1 & d1<=D1-1 & c3<=C3-1 & d3<=D3-1 sync r2 do { c2'=0, d2'=0 } goto x1R2W3W;
    when c1<=C1-1 & d1<=D1-1 & c3<=C3-1 & d3<=D3-1 sync frozen do {} goto f1R3W;

loc f1R3W : while c1<=C1 & d1<=D1 & c3<=C3 & d3<=D3 wait {c1==0&c3==0}
    when c1<=C1-1 & d1==D1 do {} goto error;
    when d3==D3 do {} goto error;
    when c1<=C1-1 & d1<=D1-1 & c3<=C3-1 & d3<=D3-1 sync r2 do { c2'=0, d2'=0 } goto f1R2W3W;
    when c1<=C1 & d1<=D1 & c3<=C3 & d3<=D3 sync go do {} goto x1R3W;

loc x1R2W : while c1<=C1 & d1<=D1 & c2<=C2 & d2<=D2 wait {c2==0}
    when c1 == C1  do {} goto x2R;
    when c1<=C1-1 & d1==D1 do {} goto error;
    when d2==D2 do {} goto error;
    when c1<=C1-1 & d1<=D1-1 & c2<=C2-1 & d2<=D2-1 sync r3 do { c3'=0, d3'=0 } goto x1R2W3W;
    when c1<=C1-1 & d1<=D1-1 & c2<=C2-1 & d2<=D2-1 sync frozen do {} goto f1R2W;

loc f1R2W : while c1<=C1 & d1<=D1 & c2<=C2 & d2<=D2 wait {c1==0&c2==0}
    when c1<=C1-1 & d1==D1 do {} goto error;
    when d2==D2 do {} goto error;
    when c1<=C1-1 & d1<=D1-1 & c2<=C2-1 & d2<=D2-1 sync r3 do { c3'=0, d3'=0 } goto f1R2W3W;
    when c1<=C1 & d1<=D1 & c2<=C2 & d2<=D2 sync go do {} goto x1R2W;

loc x1R2W3W : while c1<=C1 & d1<=D1 & c2<=C2 & d2<=D2 & c3<=C3 & d3<=D3 wait {c2==0&c3==0}
    when c1 == C1  do {} goto x2R3W;
    when c1<=C1-1 & d1==D1 do {} goto error;
    when d2==D2 do {} goto error;
    when d3==D3 do {} goto error;
    when c1<=C1-1 & d1<=D1-1 & c2<=C2-1 & d2<=D2-1 & c3<=C3-1 & d3<=D3-1 sync frozen do {} goto f1R2W3W;

loc f1R2W3W : while c1<=C1 & d1<=D1 & c2<=C2 & d2<=D2 & c3<=C3 & d3<=D3 wait {c1==0&c2==0&c3==0}
    when c1<=C1-1 & d1==D1 do {} goto error;
    when d2==D2 do {} goto error;
    when d3==D3 do {} goto error;
    when c1<=C1 & d1<=D1 & c2<=C2 & d2<=D2 & c3<=C3 & d3<=D3 sync go do {} goto x1R2W3W;

 loc error: while true wait {}

end

automaton server

sync: r1, r2, r3, empty, go, frozen;
loc idle: while true wait{x==0&y==0}
    when true sync r1 do { x'=0, y'=0 } goto active;
    when true sync r2 do { x'=0, y'=0 } goto active;
    when true sync r3 do { x'=0, y'=0 } goto active;
loc active: while y-x <= P-Q wait {x==0}
    when true sync r1 do { } goto active;
    when true sync r2 do { } goto active;
    when true sync r3 do { } goto active;
    when true sync go do {} goto executing;
loc executing: while x <= Q wait {}
    when true sync r1 do { } goto executing;
    when true sync r2 do { } goto executing;
    when true sync r3 do { } goto executing;
    when x == Q sync frozen do {} goto recharging;
    when 5*x >= 3*y sync empty do {  } goto empty;
    when 5*x <= 3*y-1 sync empty  do { x'=0,y'=0 } goto idle;
    when x <= Q-1 sync frozen do { } goto active;
loc recharging: while y <= P wait {x==0}
    when true sync r1 do { } goto recharging;
    when true sync r2 do { } goto recharging;
    when true sync r3 do { } goto recharging;
    when y == P do {x'=0,y'=0} goto active;
loc empty: while 5*x >= 3*y wait {x==0}
    when true sync r1 do { } goto active;
    when true sync r2 do { } goto active;
    when true sync r3 do { } goto active;
    when 5*x == 3*y do {} goto idle;
end

init := 
    loc[act1] == wait_for_offset1 &
    loc[act2] == wait_for_offset2 &
    loc[act3] == wait_for_offset3 &
    loc[server] == idle &
    loc[sched] == idle & p1==0 & p2==0 & p3==0 & c1==0 & d1 == 0 & c2==0 & d2 == 0 & c3==0 & d3 == 0 & 
    x==0 &y==0;
bad := loc[sched]==error;
