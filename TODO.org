#+TITLE: todo list for effort
#+author: Giuseppe Lipari and Youcheng Sun

* DONE Rename classes

* DONE Define class Symbolic State and operations on it
** DONE The Post operation
** DONE BFS symbolic state space exploration

* DONE As a first step, we do the model [100%]
  :PROPERTIES:
  :ORDERED:  t
  :END:
  Copy from old efforts. We need classes 
  - Automaton
  - Location
  - Edges
  - Guard 
  - Expression
  We need to prepare a way to create such objects that is independent from the parser

** DONE Transform Expression into a class
*** DONE Write a constructor 
*** DONE Write methods to read/write the components
*** DONE Write a method "eval" which evaluates the expression for some value of the variables
*** DONE Write test cases for it
   
** DONE Write class AtomicConstraint
   - A comparison between two expressions
*** DONE Write a method eval()
*** DONE Write test cases
** DONE Write classes for the different variables
    We treat three different types of variables:
    1) Discrete variables
    2) Parameters 
    3) Clocks
    Therefore, a variable is a "typed string", which may be associated
    an integer value.

    - it should be forbidden to have multiplications or divisions
      between clocks and parameters,
    - clocks and parameters cannot be at the denominator of a fraction
    - discrete variables instead can go anywhere. 

    (this is because, before transforming a constraint into a
    PPL::constraint, we substitute the discrete variables with 
    their actual value)

    Therefore, We have to do the following things:
*** DONE Write a class for representing variables, (discrete, clock or parameters)
*** DONE Add function check_linearity() to class expression
    This class takes a list of variables, and check the above things
*** DONE Add a parameter to function compute()
    We additionally give the list of variables that is used to evaluate a value
*** DONE Write test cases for everything


** DONE Write a class Constraint
   It is a conjunction of AtomicConstraints
*** DONE Write a method eval()
*** DONE Write test cases
** DONE Add a method to_ppl() to atomic_constraint
   This transforms the atomic constraint to a ppl expression
   the method takes as input a list of discrete variables that are 
   substituted during transformation

** DONE PPL
*** DONE Write a function to transform a Constraint into a PPL polyhedron, or octogonal shape, or DBM
*** DONE Write tests   
   
** DONE Write a class Update 
   It is an assignment 
   It contains a variable and an expression

** DONE Write class Variable 
   represents a clock

** DONE Write class DiscreteVariable
   Represent a discrete variable



  


* TODO Combined Location 
  Represents a location in the combined automata
  It has a signature


** TODO Class LocationSignature
   It is a sort of summary of the location, easy to check and compute.
   An example of interface
#+BEGIN_SRC c++
class LocationSignature {
    ...
public:
    LocationSignature(const vector<Location> &loc, const vector<DVar> &values);
    bool operator==(const LocationSignature &l);
    bool operator<(const LocationSignature &l);
    bool operator<=(const LocationSignature &l);
    bool operator!=(const LocationSignature &l)

};
#+END_SRC

** TODO Class CombinedLocation 
   This has a list of location, one per each automaton in the model,
   and a set of discrete variables names/values. It stores (caches)
   combined edges, each one of them stores (caches) the polyhedra for
   the guards. It also caches the polyhedra for the invariants. 
   
